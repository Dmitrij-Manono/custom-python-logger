# add alert level to logger and set custom name 'alert'
        logging.addLevelName(25, 'ALERT')
        logger.alert = lambda message, *args, **kws: logger._log(25, message, args, **kws)
        # add important level to logger and set custom name 'important'
        logging.addLevelName(35, 'IMPORTANT')
        logger.important = lambda message, *args, **kws: logger._log(35, message, args, **kws)
        # add exception level to logger and set custom name 'exception'
        logging.addLevelName(45, 'EXCEPTION')
        logger.exception = lambda message, *args, **kws: logger._log(45, message, args, **kws)




        def find_caller(self, stack_info=False):
        f = inspect.currentframe()
        if f is not None:
            f = f.f_back
        rv = "(unknown file)", 0, "(unknown function)"
        while hasattr(f, "f_code"):
            co = f.f_code
            filename = os.path.normcase(co.co_filename)
            if filename == logging._srcfile:
                f = f.f_back
                continue
            rv = (co.co_filename, f.f_lineno, co.co_name)
            break
        return rv



   def find_caller(self, stack_info=False):
        f = logging.currentframe()
        if f is not None:
            f = f.f_back
        rv = "(unknown file)", 0, "(unknown function)"
        while hasattr(f, "f_code"):
            co = f.f_code
            filename = os.path.normcase(co.co_filename)
            if filename == logging._srcfile:
                f = f.f_back
                continue
            rv = (co.co_filename, f.f_lineno, co.co_name)
            break
        return rv